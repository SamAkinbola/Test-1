name: Snowflake Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - Bola
    paths:
      - "Database/"

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
    # Step: Configure Snowflake CLI
    name: Install Snowflake CLI with pipx first and then with pip
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Snowflake CLI with pip
        run: |
          python -m pip install snowflake-cli

      - name: Store snow version
        shell: bash
        run: |
          snow --version >> version_output.txt
          echo "snow_version_pip=$(cat version_output.txt)" >> $GITHUB_ENV
      # Step : Execute Snowflake Files
      - name: Execute Snowflake SQL Files
        env:
          SNOWSQL_PWD: ${{ env.SNOWFLAKE_PASSWORD }} # Set password as environment variable
        run: |
          for file in Database/*.sql; do
            if [ -f "$file" ]; then
              echo "Executing $file..."
              snow sql -f "$file" \
                --accountname "${{ env.SNOWFLAKE_ACCOUNT }}" \
                --username "${{ env.SNOWFLAKE_USER }}" \
                --rolename "${{ env.SNOWFLAKE_ROLE }}" \
                --warehouse "${{ env.SNOWFLAKE_WAREHOUSE }}" \
                --dbname "${{ env.SNOWFLAKE_DATABASE }}" \
                --schemaname "${{ env.SNOWFLAKE_SCHEMA }}"
            else
              echo "No SQL files found in Database/ folder."
            fi
          done
